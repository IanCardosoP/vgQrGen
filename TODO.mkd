```markdown
# Esquema Mental: Generador de QR WiFi con Logo

## üìå M√≥dulo Principal (`wifi_qr_generator.py`)
```python
def generate_wifi_qr(
    ssid: str,
    password: str,
    encryption: str = 'WPA',
    output_dir: str = './qr_output',
    logo_path: Optional[str] = None,
    text_below: Optional[str] = None
) -> None:
    """
    Funci√≥n principal que orquesta la generaci√≥n del QR WiFi
    """
```

## üîÑ Flujo del Programa (Diagrama de Funciones)

```mermaid
graph TD
    A[generate_wifi_qr] --> B[create_wifi_config]
    A --> C[generate_qr_buffer]
    C --> D[add_logo_to_qr]
    A --> E[add_text_below]
    A --> F[save_to_png]
    D --> F
    E --> F
```

## üß© Subsistemas (Responsabilidades Separadas)

### 1. Configuraci√≥n WiFi (`wifi_config.py`)
```python
def create_wifi_config(
    ssid: str,
    password: str,
    encryption: str = 'WPA',
    hidden: bool = False
) -> Dict[str, Any]:
    """
    Crea objeto de configuraci√≥n WiFi en formato est√°ndar
    Retorna: {
        'ssid': str,
        'password': str,
        'encryption': str,
        'hidden': bool,
        'raw_string': str  # Formato: WIFI:S:<SSID>;T:<WPA/WEP/None>;P:<password>;;
    }
    """
```

### 2. Generaci√≥n QR (`qr_generator.py`)
```python
def generate_qr_buffer(
    wifi_config: Dict[str, Any],
    size: int = 400,
    border: int = 10,
    error_correction: str = 'H'
) -> BytesIO:
    """
    Genera QR en buffer de memoria usando qrcode library
    Retorna objeto BytesIO con imagen QR
    """
```

### 3. Manipulaci√≥n de Imagen (`image_processor.py`)
```python
def add_logo_to_qr(
    qr_buffer: BytesIO,
    logo_path: str,
    logo_size_ratio: float = 0.2
) -> Image:
    """
    Superpone logo en centro del QR manteniendo legibilidad
    Retorna objeto PIL.Image modificado
    """
```

### 4. Generaci√≥n de Texto (`text_utils.py`)
```python
def add_text_below(
    image: Image,
    text: str,
    font_path: str = None,
    font_size: int = 20,
    padding: int = 15
) -> Image:
    """
    A√±ade texto centrado debajo de la imagen QR
    Retorna objeto PIL.Image extendido
    """
```

### 5. Sistema de Archivos (`file_manager.py`)
```python
def save_to_png(
    image: Image,
    output_dir: str,
    filename: str = None
) -> str:
    """
    Guarda imagen en PNG con nombre basado en SSID y timestamp
    Crea directorio si no existe
    Retorna ruta completa del archivo guardado
    """
```

## üõ†Ô∏è Dependencias Externas
```markdown
- `qrcode` -> Generaci√≥n del c√≥digo QR
- `Pillow (PIL)` -> Manipulaci√≥n de im√°genes
- `datetime` -> Timestamp para nombres de archivo
- `os` -> Manejo de sistema de archivos
- `typing` -> Soporte para type hints
```

## ‚úÖ Buenas Pr√°cticas Implementadas
1. **Single Responsibility Principle**: Cada funci√≥n hace una sola cosa
2. **Type Hints**: Tipado est√°tico para mejor mantenibilidad
3. **Manejo de errores**: Validar inputs (ej: encryption ‚àà ['WPA','WEP','None'])
4. **Documentaci√≥n**: Docstrings explicativos en cada funci√≥n
5. **Flexibilidad**: Par√°metros opcionales con valores por defecto
6. **Organizaci√≥n**: M√≥dulos separados por responsabilidad
```

## ‚ú® Extras Recomendados
```markdown
- A√±adir funci√≥n `validate_wifi_params()` para verificar SSID/password v√°lidos
- Implementar logging para rastrear el proceso
- Crear versi√≥n CLI usando `argparse`
- Generar PDF con instrucciones junto al QR
- Soporte para m√∫ltiples idiomas en el texto
```

